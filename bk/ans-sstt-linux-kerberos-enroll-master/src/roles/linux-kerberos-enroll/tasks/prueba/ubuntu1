---

- name: Check puertos y conexion ldap 389  dns 53 ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  wait_for:
    host: "{{ dc.machinearsys }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: no
  with_items:
    - 53
    - 389

- name: Check y conexion  ldap 389  dns 53 AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: no
  with_items:
    - 53
    - 389

- name: Check y conexion  ldap 389  dns 53 UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws  }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: no
  with_items:
    - 53
    - 389

- name: INSTALL BASIC PACKAGES UBUNTU
  apt:
    name: "{{ software_packages_UB.packages}}"
    state: present
  tags:
    - apt
  register: Install

- debug:
    var: Install


- name: EDIT RESOLV UXXI 
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_uxxi }}"

- name: EDIT RESOLV ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_arsys }}"

- name: EDIT RESOLV AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_aws }}"


- name: STOP IS RUNNING
  systemd:
    state: stopped
    name: "{{ item }}"
    enabled: no
  loop: "{{ services.ubuntu_down }}"



- name: EDIT krb5.conf
  copy:
    src: templates/ubuntu/krb5.conf
    dest: /etc/krb5.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT SSH
  copy:
    src: templates/ubuntu/sshd
    dest: /etc/ssh/sshd_conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes


- name: EDIT timesyncd.conf
  copy:
    src: templates/ubuntu/timesyncd.conf
    dest: /etc/systemd/timesyncd.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

##- name: EDIT samba
##  copy:
##    src: templates/ubuntu/smb
##    dest: /etc/samba/smb.conf
##    owner: root
##    group: root
##    mode: u=rw,g=r,o=r
##    backup: yes
##
- name: EDIT nsswitch
  copy:
    src: templates/ubuntu/nsswitch.conf
    dest: /etc/nsswitch.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT realmd.conf
  copy:
    src: templates/ubuntu/realmd.conf
    dest: /etc/realmd.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT common-account
  copy:
    src: templates/ubuntu/common-account
    dest: /etc/pam.d/common-account
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT common-auth 
  copy:
    src: templates/ubuntu/common-auth 
    dest: /etc/pam.d/common-auth 
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT common-password 
  copy:
    src: templates/ubuntu/common-password
    dest: /etc/pam.d/common-password 
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT common-session
  copy:
    src: templates/ubuntu/common-session
    dest: /etc/pam.d/common-session
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes


- name: replace line krb5.conf ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  replace:
    path: /etc/krb5.conf
    regexp: 'H15258.redocu.lan'
    replace: '{{ dc.machinearsys }}'
    

- name: replace line krb5.conf UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  replace:
    path: /etc/krb5.conf
    regexp: '^H15258.redocu.lan'
    replace: '{{ dc.machineuxxiaws }}'
    

- name: replace line krb5.conf AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  replace:
    path: /etc/krb5.conf
    regexp: '^H15258.redocu.lan'
    replace: '{{ dc.machineuxxiaws }}'
  notify:
  - restart service  
##############################

#- name: EDIT SMB (WORKGROUP)
#  lineinfile:
#    path: /etc/samba/smb.conf
#    regexp: '\tworkgroup ='
#    line: "\tworkgroup = REDOCU"
#    backup: true

#- name: EDIT SMB (SECURITY)
#  lineinfile:
#    path: /etc/samba/smb.conf
#    regexp: '\tsecurity ='
#    line: "\t#security = ADS"

- name: EDIT SMB (SECURITY)
  lineinfile:
    path: /etc/samba/smb.conf
    regexp: '^\s*security =.*$'
    line: '\t#security = ADS'
    backrefs: yes
    backup: true

- name: replacing  (WORKGROUP)
  lineinfile:
    path: /etc/samba/smb.conf
    regexp: '^\s*workgroup =.*$'
    line: '\tworkgroup = REDOCU'
    backrefs: yes

- name: EDIT SMB (ADD line smb.conf)
  lineinfile:
    path: /etc/samba/smb.conf
    insertafter: "\t#security = ADS"
    line: "\t{{ item }}"
  loop: "{{ dc.smblinesSMB }}"

- name: AGREGAR GRUPO DE AD VALID USERS
  shell: sed -i '/valid users =/ s/$/ @o_todos/' /etc/samba/smb.conf

- name: AGREGAR GRUPO DE AD WRITE LIST
  shell: sed -i '/write list =/ s/$/ @o_todos/' /etc/samba/smb.conf

- name: MAKE SURE SAMBA SERVICE IS RUNNING
  systemd:
    state: started
    name: smbd
    enabled: yes

- name: MAKE SURE WINBIND SERVICE IS RUNNING
  systemd:
    state: started
    name: winbind
    enabled: yes

- name: EDIT PAM_WINBIND
  copy:
    src: templates/pam_winbind.conf
    dest: /etc/security/pam_winbind.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

#- name: EDIT NSSWITCH
#  copy:
#    src: templates/nsswitch.conf
#    dest: /etc/nsswitch.conf
#    owner: root
#    group: root
#    mode: u=rw,g=r,o=r
#    backup: yes

#- name: EDIT SMB (SECURITY)
#  lineinfile:
#    path: /etc/samba/smb.conf
#    regexp: '\t#security ='
#    line: "\tsecurity = ADS"
#
###########################
- name: SERVICE IS RUNNING
  systemd:
    state: restarted
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.ubuntu }}"
  
  
- name: STOP IS RUNNING
  systemd:
    state: stopped
    name: "{{ item }}"
    enabled: no
  loop: "{{ services.ubuntu_down }}"




- name: UNION MACHINE TO DOMAIN
  shell: echo '{{ dc.admin.pass }}' | kinit "{{ dc.admin.user }}@{{ dc.name }}"

- name: UNION MACHINE TO DOMAIN
  shell: echo '{{ dc.admin.pass }}' |net ads join -U "{{ dc.admin.user }}@{{ dc.name }}"
  ignore_errors: yes

- name: MAKE SURE SERVICES ARE RUNNING
  systemd:
    state: restarted
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.ubuntu }}"



#- name: EDIT SSHD1
#  lineinfile:
#    path: /etc/ssh/sshd_config
#    regexp: '^GSSAPIAuthentication'
#    line: 'GSSAPIAuthentication no'
#    backup: true
#
#- name: EDIT SSHD2
#  lineinfile:
#    path: /etc/ssh/sshd_config
#    regexp: '^PasswordAuthentication'
#    line: 'PasswordAuthentication yes'
#
#- name: EDIT SSHD3
#  lineinfile:
#    path: /etc/ssh/sshd_config
#    regexp: '^KerberosAuthentication'
#    line: 'KerberosAuthentication yes'
#
- name: SSHD RELOAD
  systemd:
    name: sshd
    state: restarted
    enabled: yes


- name: LOGIN
  shell: echo 'id ; exit' |su - "{{ dc.admin.user }}"

- name: EDIT SUDOERS
  lineinfile:
    path: /etc/sudoers
    state: present
    line: "{{ item }}"
  loop: "{{ dc.sudoerslines }}"

- name: EDIT RSYSLOG
  lineinfile:
    path: /etc/rsyslog.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.graylog }}"

- name: RESTART RSYSLOG SERVICE
  systemd:
    state: restarted
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.ubuntu }}"
                                
