- include: ubuntu.yml
  when: ansible_distribution == "Ubuntu"

- name: Instalar PYTHON-NETADDR
  connection: local
  yum:
    name: python-netaddr
    state: present
  ignore_errors: yes

- name: Check puertos y conexion ldap 389  dns 53 ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  wait_for:
    host: "{{ dc.machinearsys }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: yes
  with_items:
    - 53
    - 389

- name: Check y conexion  ldap 389  dns 53 AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: yes
  with_items:
    - 53
    - 389

- name: Check y conexion  ldap 389  dns 53 UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws  }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: yes
  with_items:
    - 53
    - 389



- name: INSTALL BASIC PACKAGES CENTOS ORACLE REDHAT
  yum:
    name: "{{ software_packages.packages}}"
    state: present
  tags:
    - yum

- name: EDIT RESOLV UXXI 
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_uxxi }}"

- name: EDIT RESOLV ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_arsys }}"

- name: EDIT RESOLV AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    insertafter: '^search'
    line: "{{ item }}"
  loop: "{{ dc.nameserver_aws }}"

- name: EDIT KDC
  replace:
    path: /var/kerberos/krb5kdc/kdc.conf
    regexp: 'EXAMPLE.COM'
    replace: '{{ dc.name }}'

- name: EDIT KRB5
  copy:
    src: templates/krb5.conf
    dest: /etc/krb5.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: replace line krb5.conf ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  replace:
    path: /etc/krb5.conf
    regexp: 'H15258.redocu.lan'
    replace: '{{ dc.machinearsys }}'
    #backrefs: yes

- name: replace line krb5.conf UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  replace:
    path: /etc/krb5.conf
    regexp: 'H15258.redocu.lan'
    replace: '{{ dc.machineuxxiaws }}'
    #backrefs: yes

- name: replace line krb5.conf AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  replace:
    path: /etc/krb5.conf
    regexp: 'H15258.redocu.lan'
    replace: '{{ dc.machineuxxiaws }}'
    #backrefs: yes
    #

- name: EDIT KADM5
  replace:
    path: /var/kerberos/krb5kdc/kadm5.acl
    regexp: 'EXAMPLE.COM'
    replace: '{{ dc.name }}'

- name: VALIDATE BD Kerberos
  stat:
    path: /var/kerberos/krb5kdc/principal
  register: stat_result

- name: CREATE DB KERBEROS
  shell: kdb5_util create -s -r "{{ dc.name }}" -P kerberos2019
  when: stat_result.stat.exists == False

- name: MAKE SURE KRB5 SERVICE IS RUNNING
  systemd:
    state: started
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.krb5 }}"

- name: VALIDATE PRINCIPAL USERS
  shell: kadmin.local -q "getprinc {{ item.key }}"
  with_dict: "{{ dc.princs }}"
  changed_when: false
  register: princs

- name: CREATE PRINCIPAL USERS
  shell: kadmin.local -q "addprinc -pw {{ item.value }} {{ item.key }}"
  when: '"Principal does not exist" in princs.results[0].stderr'
  with_dict: "{{ dc.princs }}"

- name: ADD KDC HOSTNAME TO ADDPRINC ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  shell: kadmin.local -q "addprinc -randkey {{ ansible_fqdn }}/{{ dc.machinearsys }}"
- name: ADD KDC HOSTNAME TO ADDPRINC UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  shell: kadmin.local -q "addprinc -randkey {{ ansible_fqdn }}/{{ dc.machinearsys }}"
- name: ADD KDC HOSTNAME TO ADDPRINC AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  shell: kadmin.local -q "addprinc -randkey {{ ansible_fqdn }}/{{ dc.machinearsys }}"

- name: ADD KDC HOSTNAME TO KTADD DB ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  shell: kadmin.local -q "ktadd {{ ansible_fqdn }}/{{ dc.machinearsys }}"
- name: ADD KDC HOSTNAME TO KTADD DB UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  shell: kadmin.local -q "ktadd {{ ansible_fqdn }}/{{ dc.machineuxxiaws }}"
- name: ADD KDC HOSTNAME TO KTADD DB AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  shell: kadmin.local -q "ktadd {{ ansible_fqdn }}/{{ dc.machineuxxiaws }}"

- name: EDIT SSHD1
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^GSSAPIAuthentication'
    line: 'GSSAPIAuthentication no'
    backup: true

- name: EDIT SSHD2
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: 'PasswordAuthentication yes'

- name: EDIT SSHD3
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^KerberosAuthentication'
    line: 'KerberosAuthentication yes'

- name: SSHD RELOAD
  systemd:
    name: sshd
    state: restarted
    enabled: yes

- name: EDIT KERBEROS.XML
  copy:
    src: templates/kerberos.xml
    dest: /etc/firewalld/services/kerberos.xml
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  when: ansible_distribution == "Amazon"
  ignore_errors: yes

- name: MAKE SURE NTPD SERVICE IS RUNNING
  systemd:
    state: started
    name: ntpd
    enabled: yes

- name: SSHD RELOAD
  systemd:
    name: sshd
    state: reloaded

#- name: EDIT SMB (WORKGROUP)
#  lineinfile:
#    path: /etc/samba/smb.conf
#    regexp: '\tworkgroup ='
#    line: "\tworkgroup = REDOCU"
#    backup: true

#- name: EDIT SMB (SECURITY)
#  lineinfile:
#    path: /etc/samba/smb.conf
#    regexp: '\tsecurity ='
#    line: "\t#security = ADS"

- name: EDIT SMB (SECURITY)
  lineinfile: 
    path: /etc/samba/smb.conf
    regexp: '^\s*security =.*$'
    line: '\t#security = ADS'
    backrefs: yes
    backup: true

- name: replacing  (WORKGROUP)
  lineinfile:
    path: /etc/samba/smb.conf
    regexp: '^\s*workgroup =.*$'
    line: '\tworkgroup = REDOCU'
    backrefs: yes


- name: EDIT SMB (ADD line smb.conf)
  lineinfile:
    path: /etc/samba/smb.conf
    insertafter: "\t#security = ADS"
    line: "\t{{ item }}"
  loop: "{{ dc.smblines }}"

- name: AGREGAR GRUPO DE AD VALID USERS
  shell: sed -i '/valid users =/ s/$/ @o_todos/' /etc/samba/smb.conf
 
- name: AGREGAR GRUPO DE AD WRITE LIST
  shell: sed -i '/write list =/ s/$/ @o_todos/' /etc/samba/smb.conf

- name: MAKE SURE SAMBA SERVICE IS RUNNING
  systemd:
    state: started
    name: smb
    enabled: yes

- name: MAKE SURE WINBIND SERVICE IS RUNNING
  systemd:
    state: started
    name: winbind
    enabled: yes

- name: EDIT PAM_WINBIND
  copy:
    src: templates/pam_winbind.conf
    dest: /etc/security/pam_winbind.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes 

- name: EDIT NSSWITCH
  copy:
    src: templates/nsswitch.conf
    dest: /etc/nsswitch.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT SMB (SECURITY)
  lineinfile:
    path: /etc/samba/smb.conf
    regexp: '\t#security ='
    line: "\tsecurity = ADS"

- name: UNION MACHINE TO DOMAIN
  shell: echo '{{ dc.admin.pass }}' | kinit "{{ dc.admin.user }}@{{ dc.name }}"

- name: UNION MACHINE TO DOMAIN
  shell: echo '{{ dc.admin.pass }}' |net ads join -U "{{ dc.admin.user }}@{{ dc.name }}"
  ignore_errors: yes

- name: MAKE SURE SERVICES ARE RUNNING
  systemd:
    state: restarted
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.common }}"

- name: VERIFICATION KADMIN.LOCAL TOOL LOG WITH USER DOMAIN
  shell: echo quit | kadmin.local

- name: LOGIN
  shell: echo 'id ; exit' |su - "{{ dc.admin.user }}"
  ignore_errors: yes

- name: EDIT SUDOERS 
  lineinfile:
    path: /etc/sudoers
    state: present
    line: "{{ item }}"
  loop: "{{ dc.sudoerslines }}"

- name: EDIT BASH, HOME
  shell: authconfig --enablemkhomedir --update

- name: EDIT RSYSLOG 
  lineinfile:
    path: /etc/rsyslog.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.graylog }}"

- name: RESTART RSYSLOG SERVICE
  systemd:
    state: restarted
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.common }}"



#- include: ubuntu.yml
#  when: ansible_distribution == "Ubuntu"

