---
- name: Gather packages
  package_facts:
    manager: auto
  ignore_errors: yes


#- name: Print the rpm packages
#  debug:
#    var: ansible_facts.packages

- name: Instalar PYTHON-NETADDR
  connection: local
  yum:
    name: python-netaddr
    state: present
  ignore_errors: yes

  
- name: UBUNTU Check puertos y conexion ldap 389  dns 53 ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  wait_for:
    host: "{{ dc.machinearsys }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: no
  with_items:
    - 53
    - 636
    - 88
    - 445
    - 135

- name: Check y conexion  ldap 389  dns 53 AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: no
  with_items:
    - 53
    - 636
    - 88
    - 445
    - 135

- name: Check y conexion  ldap 389  dns 53 UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws  }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  ignore_errors: no
  with_items:
    - 53
    - 636
    - 88
    - 445
    - 135
#############################################
- name: MENSAJE
  debug:
    msg:
      - '- COMPROBAR SI ESTA REGISTRADA EN EL DOMINIO'
      - '- Se comprueba si la maquina esta registrada en el dominio con keberos'
      - '- Si la maquina no esta registrada salta los procesos'
        
- name: check if keberos is installed
  shell: apt list --installed | grep krb5-config
  register: keberos_installed
  ignore_errors: True
  check_mode: False
  changed_when: False

- name: KEBEROS IS INSTALLED
  debug:
    msg: "keberos is installed"
  when: keberos_installed.rc == 0
  
- name: Keberos not installed
  when: keberos_installed.rc == 1
  debug: 
    msg: "keberos not installed"

- name: ELIMINAR DEL REGISTRO CON KERBEROS
  when: keberos_installed.rc == 0
  shell: echo '{{ dc.admin.pass }}' |  net ads leave -U "{{ dc.admin.user }}@{{ dc.name }}"
  #net ads leave -U intlinuxldap@REDOCU.LAN
  ignore_errors: yes

- name: DESINSTALATAR PAQUETES KEBEROS
  when: keberos_installed.rc == 0
  yum:
    name: "{{ software_remove_UB.packages }}"
    state: absent
  tags:
    - removekrb
  #ignore_errors: yes

- name: BORRAR HOME
  when: keberos_installed.rc == 0
  shell: rm -rf /home/REDOCU
  tags:
    - remove

- name: MAKE SURE SERVICES ARE RUNNING
  when: keberos_installed.rc == 0
  systemd:
    state: restarted
    name: "{{ item }}"
    enabled: yes
  loop: "{{ services.remove }}"
  ignore_errors: yes

###
- name: check if realm is installed
  shell:  apt list --installed | grep realmd
  register: realm_installed
  ignore_errors: True
  check_mode: False
  changed_when: False

- name: REALM IS INSTALLED
  debug:
    msg: "realm is installed"
  when: realm_installed.rc == 0
  
- name: realm not installed
  when: realm_installed.rc == 1
  debug: 
    msg: "realm not installed"

- name: DESINSTALATAR PAQUETES SSSD
  when: realm_installed.rc == 0
  yum:
    name: "{{ software_packages_remove_sssd.packages }}"
    state: absent
  tags:
    - removessd

- name: DESINSTALATAR PAQUETES SSSD 8
  when: realm_installed.rc == 0 and ansible_os_family == "RedHat" and ansible_distribution_major_version == '8'
  yum:
    name: "{{ software_packages_remove_sssd.packages}}"
    state: absent
  tags:
    - removessd8
    
- name: BORRAR HOME
  when: realm_installed.rc == 0
  shell: rm -rf /home/REDOCU
 

- name: MENSAJE2
  debug:
    msg:
      - 'SE INICIA EL REGISTRO AL AD CON LDAP'




##############################################



- name: INSTALL BASIC PACKAGES UBUNTU
  when: ansible_os_family == "Debian" 
  apt:
    name: "{{ software_packages_UB.packages}}"
    state: present
  tags:
    - apt
  register: Install

- debug:
    var: Install


- name: RESOLV
  lineinfile:
    path: /etc/resolv.conf
    #state: present
    regexp: '^nameserver'
    line: '#Active Directory-DNS'
- name: RESOLV-2

  lineinfile:
    path: /etc/resolv.conf
    #state: present
    regexp: '^nameserver'
    line: ''

- name: EDIT RESOLV UXXI 
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_uxxi }}"

- name: EDIT RESOLV ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.nameserver_arsys }}"

- name: EDIT RESOLV AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  lineinfile:
    path: /etc/resolv.conf
    state: present
    insertafter: '^search'
    line: "{{ item }}"
  loop: "{{ dc.nameserver_aws }}"

- name: EDIT nsswitch
  copy:
    src: templates/ubuntu/nsswitch.conf
    dest: /etc/nsswitch.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes
######### PAM  ########

- name: EDIT common-account
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-account
    dest: /etc/pam.d/common-account
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT common-auth 
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-auth 
    dest: /etc/pam.d/common-auth 
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT common-password 
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-password  
    dest: /etc/pam.d/common-password  
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT common-password 
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-password  
    dest: /etc/pam.d/common-password  
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT common-session 
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-session  
    dest: /etc/pam.d/common-session  
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT common-session-noninteractive  
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-session-noninteractive   
    dest: /etc/pam.d/common-session-noninteractive  
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT common-session-noninteractive  
  #when: keberos_installed.rc == 0
  copy:
    src: templates/pam-ubuntu/common-session-noninteractive   
    dest: /etc/pam.d/common-session-noninteractive  
    owner: root
    group: root
    mode: 0600
    backup: yes

#############
- name: EDIT NSCD
  #when: keberos_installed.rc == 0
  copy:
    src: templates/nscd-ubu.conf
    dest: /etc/nscd.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes

- name: EDIT NSLCD_ARSYS
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  copy:
    src: templates/nslcd-ubu.arsys
    dest: /etc/nslcd.conf
    owner: root
    group: root
    mode: 0600
    backup: yes
- name: EDIT NSLCD_UXXI
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  copy:
    src: templates/nslcd-ubu.uxxi
    dest: /etc/nslcd.conf
    owner: root
    group: root
    mode: 0600
    backup: yes
- name: EDIT NSLCD_AWS
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  copy:
    src: templates/nslcd-ubu.uxxi
    dest: /etc/nslcd.conf
    owner: root
    group: root
    mode: 0600
    backup: yes

- name: EDIT NSLCD
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  lineinfile:
    path: /etc/nslcd.conf
    regexp: '^ignorecase yes'
    line: '#ignorecase yes'


- name: EDIT LDAP_ARSYS
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  copy:
    src: templates/ldapasrsys.conf
    dest: /etc/ldap.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
- name: EDIT LDAP_UXXI
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  copy:
    src: templates/ldapuxxi.conf
    dest: /etc/ldap.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
- name: EDIT LDAP_AWS
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  copy:
    src: templates/ldapuxxi.conf
    dest: /etc/ldap.conf
    owner: root
    group: root
    mode: 0644
    backup: yes


    #######################
- name: EDIT CERT_ARSYS
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16')
  copy:
    src: templates/ca-certificates.crt
    dest: /etc/ssl/certs/
    owner: root
    group: root
    mode: 0700
    backup: yes
- name: EDIT CERT_UXXI
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  copy:
    src: templates/ca-certificates.crt
    dest: /etc/ssl/certs/
    owner: root
    group: root
    mode: 0700
    backup: yes
- name: EDIT CERT_AWS
  #when: keberos_installed.rc == 0
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  copy:
    src: templates/ca-certificates.crt
    dest: /etc/ssl/certs/
    owner: root
    group: root
    mode: 0700
    backup: yes   


   #######################
- name: EDIT NSSWITCH
  #when: keberos_installed.rc == 0
  copy:
    src: templates/nsswitch.conf
    dest: /etc/nsswitch.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
  
- name: NSLCD RELOAD
  when: ansible_os_family == "Debian"
  #when: keberos_installed.rc == 1
  systemd:
    name: nslcd
    state: restarted
    enabled: yes

- name: NSCD RELOAD
  when: ansible_os_family == "Debian"
  #when: keberos_installed.rc == 1
  systemd:
    name: nscd
    state: restarted
    enabled: yes
  ignore_errors: yes

- name: LIST GETENT
  shell: getent passwd astaroldap3
  register: realm
  ignore_errors: yes
  
- debug: var=realm.stdout_lines

- name: LOGIN
  shell: id astaroldap3
  #@redocu.lan
  #echo 'id ; exit' |su - "{{ dc.admin.user }}"
  ignore_errors: yes
  register: user

- debug: var=user.stdout_lines
################################


- name: EDIT SSHD1
  when: keberos_installed.rc == 1 and realm_installed.rc == 1
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^GSSAPIAuthentication'
    line: 'GSSAPIAuthentication no'
    backup: true

- name: EDIT SSHD2
  when: keberos_installed.rc == 1 and realm_installed.rc == 1
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PasswordAuthentication'
    line: 'PasswordAuthentication yes'

- name: EDIT SSHD3
  when: keberos_installed.rc == 1 and realm_installed.rc == 1
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^KerberosAuthentication'
    line: 'KerberosAuthentication yes'

- name: SSHD RELOAD
  when: keberos_installed.rc == 1 and realm_installed.rc == 1
  systemd:
    name: sshd
    state: restarted
    enabled: yes
- name: EDIT SUDO USER SSTT
  lineinfile: 
    path: /etc/sudoers
    line: '%SSTT-Infraestructura ALL=(ALL) NOPASSWD: ALL'
    backup: yes

- name: EDIT SUDO USER 
  lineinfile: 
    path: /etc/sudoers
    line: '%o_todos_espa ALL=(ALL) NOPASSWD: ALL'
    backup: yes    

- name: EDIT SUDO USER STAIL
  lineinfile: 
    path: /etc/sudoers
    line: 'stail ALL=(ALL) NOPASSWD: ALL'
    backup: yes


- name: EDIT RSYSLOG 
  when: keberos_installed.rc == 1 and realm_installed.rc == 1
  lineinfile:
    path: /etc/rsyslog.conf
    state: present
    line: "{{ item }}"
  loop: "{{ dc.graylog }}"

- name: RESTART RSYSLOG SERVICE
  when: keberos_installed.rc == 1
  systemd:
    name: rsyslog
    state: restarted
    enabled: yes

- name: CREAR USUARIO UXXI
  user:
    name: "{{ dc.uxxi.useru }}"
    shell: /bin/bash
    state: present
    update_password: on_create
    password: "{{ dc.uxxi.passu | password_hash('sha512') }}"

- name: CREAR USUARIO UXXIDB
  user:
    name: "{{ dc.uxxidb.useru }}"
    shell: /bin/bash
    state: present
    update_password: on_create
    password: "{{ dc.uxxidb.passu | password_hash('sha512') }}"


#####################################
- name: check if SAMBA is installed
  shell:  apt list --installed | grep samba
  register: samba_installed
  ignore_errors: True
  check_mode: False
  changed_when: False

- name: SAMBA IS INSTALLED
  debug:
    msg: "samba is installed"
  when: samba_installed.rc == 0

- name: SAMBA NOT INSTALLED
  debug:
    msg: "samba not installed"
  when: samba_installed.rc == 1

- name: HABILITAR UXXI SAMBA
  when: samba_installed.rc == 0
  shell: "(echo {{ dc.uxxi.passu }}; echo {{ dc.uxxi.passu }}) | smbpasswd -a uxxi"
  #shell: (echo "xxxxxx"; echo "xxxxx") | smbpasswd -a uxxi
 
- name: HABILITAR UXXIDB SAMBA
  when: samba_installed.rc == 0
  shell: "(echo {{ dc.uxxidb.passu }}; echo {{ dc.uxxidb.passu }}) | smbpasswd -a uxxidb"
  #shell: (echo "xxxxxx"; echo "xxxxx") | smbpasswd -a uxxi
#############################


- name: CREAR USUARIO STAIL
  user:
    name: "{{ dc.stail.user }}"
    shell: /bin/bash
    state: present
    update_password: on_create
    password: "{{ dc.stail.pass | password_hash('sha512') }}"

#- name: STAIL PERMISOS ROOT
#  shell: cat 
#  ignore_errors: yes


- name: EDIT SSHD USER STAIL
  lineinfile: 
    path: /etc/ssh/sshd_config
    insertafter: AuthorizedKeysFile 
    line: 'AllowGroups stail root SSTT-Infraestructura'
    backup: true
  ignore_errors: yes

- name: SERVER ADs
  shell: netstat -putona | grep 636
  ignore_errors: yes
  register: netstat
  

- debug: msg="{{netstat.stdout_lines}}"








