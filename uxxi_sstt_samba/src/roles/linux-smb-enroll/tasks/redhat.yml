

- name: Gather packages
  package_facts:
    manager: auto
  ignore_errors: yes


#- name: Print the rpm packages
#  debug:
#    var: ansible_facts.packages

- name: Instalar PYTHON-NETADDR
  when: ansible_os_family == "RedHat" or ansible_distribution == 'Amazon'
  connection: local
  yum:
    name: python-netaddr
    state: present
  ignore_errors: yes

- name: Check puertos y conexion  port 139 445   ARSYS
  when: ansible_default_ipv4.address | ipaddr('172.23.0.0/16') or ansible_default_ipv4.address | ipaddr('172.21.0.0/16') 
  wait_for:
    host: "{{ dc.machinearsys }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  #ignore_errors: yes
  with_items:
    
    - 445
    

- name: Check y conexion port 139 445 AWS
  when: ansible_default_ipv4.address | ipaddr('172.30.0.0/16') or ansible_default_ipv4.address | ipaddr('172.31.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
  #ignore_errors: yes
  with_items:
    
    - 445


- name: Check y conexion port 139 44 UXXI
  when: ansible_default_ipv4.address | ipaddr('172.16.0.0/16') or ansible_default_ipv4.address | ipaddr('172.29.0.0/16')
  wait_for:
    host: "{{ dc.machineuxxiaws  }}"
    port: "{{ item }}"
    state: started         #El puerto debe estar abierto
    delay: 0               #no espere antes de la primera verificación (segundos)
    timeout: 1            # Dejar de comprobar después del tiempo de espera (seg)
#  #ignore_errors: yes
  with_items:
     
     - 445
###################COMPROBAR SI SAMBA ESTA INSTALADO##########
- name: MENSAJE
  debug:
    msg:
      - '- COMPROBAR SI SAMBA ESTA INSTALADO'
            

- name: check if SAMBA is installed
  shell:  rpm -qa  | grep samba-client*
  register: samba_installed
  ignore_errors: True
  check_mode: False
  changed_when: False

- name: SAMBA IS INSTALLED
  debug:
    msg: "samba is installed"
  when: samba_installed.rc == 0

- name: SAMBA NOT INSTALLED
  debug:
    msg: "samba not installed"
  when: samba_installed.rc == 1
  
      

############################ INSTALACION ##############################


- name: INSTALL BASIC PACKAGES AMAZON
  when: ansible_distribution == 'Amazon' and  ansible_distribution_major_version == '2' and samba_installed.rc == 1
  yum:
    name: "{{ software_smb.packages}}"
    state: present
  register: install_aws  
  #ignore_errors: yes

- name: INSTALL BASIC PACKAGES CENTOS8 ORACLE8 REDHAT8
  #when: ansible_distribution == 'OracleLinux' and  ansible_distribution_major_version == '8'
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == '8' and samba_installed.rc == 1
  dnf:
    name: "{{ software_smb8.packages}}"
    state: present
  register: install_redhat8
  #ignore_errors: yes

- name: INSTALL BASIC PACKAGES CENTOS ORACLE REDHAT
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == '7' or ansible_os_family == "RedHat" and ansible_distribution_major_version == '6' and samba_installed.rc == 1
  yum:
    name: "{{ software_smb.packages}}"
    state: present
  tags:
    - yum
  register: install_redhat
 # ignore_errors: yes




########### samba

- name: EDIT SMB (DELETE line smb.conf)
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  #when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0) or (samba_installed.rc == 0)
  lineinfile:
    path: /etc/samba/smb.conf
    state: absent
    regexp: "{{ item }}"
  loop: "{{ dc.smblinesde }}"

- name: EDIT SMB (SECURITY)
  #when: keberos_installed.rc == 1 or realm_installed.rc == 1 or samba_installed.rc == 1
  #when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0) or (samba_installed.rc == 0)
  lineinfile:
    path: /etc/samba/smb.conf
    insertafter: "workgroup"
    regexp: '^\s*security =.*$'
    line: "\tsecurity = user"

- name: EDIT SMB (WORKGROUP)
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  #when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0) or (samba_installed.rc == 0)
  lineinfile:
    path: /etc/samba/smb.conf
    insertbefore: "security"
    regexp: '^\s*workgroup =.*$'
    line: "\tworkgroup = UXXI"
    backup: true


- name: EDIT SMB (ADD line smb.conf)
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  #when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0) or (samba_installed.rc == 0)
  lineinfile:
    path: /etc/samba/smb.conf
    insertafter: "workgroup"
    state: present
    line: "\t{{ item }}"
  loop: "{{ dc.smblines }}"


##################################################NUEVA CARPETA
#########ojo falta  tabular y siempre agregar lineas 
- name: SALTO DE LINEA
  shell: echo -e '\n' >> /etc/samba/smb.conf

- name: ADD NEW FOLDER
  when:  confirm == "yes"
  lineinfile:
    path: /etc/samba/smb.conf
    #insertafter: "workgroup"
    state: present
    line: "{{ item }}"
  register: new_folder
  with_items:
  
    - comment = {{ comment }}
    - path = {{ path }}
    - valid users = oroot {{ user }}
    - write list = oroot {{ user }}
    - force user = {{ force }}

- name: ADD LINE
  when:  confirm == "yes"
  lineinfile:
    path: /etc/samba/smb.conf
    insertbefore: "comment"
    state: present
    line: "[{{ comment }}]"


- name: ADD LINE PERMISOS
  when:  confirm == "yes"
  lineinfile:
    path: /etc/samba/smb.conf
    #insertafter: "workgroup"
    #state: present
    line: "\t{{ item }}"
  loop: "{{ dc.rutalines }}"  

####################################################
#- name: DELETE @O_TODOS GROUP
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
 # when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0)
 # shell: sed -i 's/@o_todos//g' "/etc/samba/smb.conf"

- name: AGREGAR GRUPO DE AD VALID USERS ORACLE12
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i '/valid users =/ s/ooracle12/ uxxidb/' /etc/samba/smb.conf

- name: AGREGAR GRUPO DE AD VALID USERS ORACLE12
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i '/write list =/ s/ooracle12/ uxxidb/' /etc/samba/smb.conf
#- name: AGREGAR GRUPO DE AD VALID USERS
#  when: keberos_installed.rc == 1 and realm_installed.rc == 1
#  shell: sed -i '/valid users =/ s/$/ uxxi/' /etc/samba/smb.conf


####
- name: AGREGAR GRUPO DE AD WRITE LIST ORA12AS
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i '/valid users =/ s/oora12as/ uxxi/' /etc/samba/smb.conf


- name: AGREGAR GRUPO DE AD WRITE LIST ORA12AS
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i '/write list =/ s/oora12as/ uxxi/' /etc/samba/smb.conf
#####

- name: AGREGAR GRUPO DE AD WRITE LIST ORACLE
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i '/write list =/ s/ooracle/ uxxi/' /etc/samba/smb.conf

- name: AGREGAR GRUPO DE AD VALID USERS ORACLE
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i '/valid users =/ s/ooracle/ uxxi/' /etc/samba/smb.conf

- name: DELETE DOMAINUSERS GROUP
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i 's/@"domain users"//g' "/etc/samba/smb.conf"

- name: DELETE DOMAINUSERS GROUP2
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i 's/@//g' "/etc/samba/smb.conf"

- name: DELETE O_TODOS GROUP
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i 's/o_todos//g' "/etc/samba/smb.conf"
  

- name: DELETE @O_TODOS GROUP
  #when: keberos_installed.rc == 1 and realm_installed.rc == 1
  when: samba_installed.rc == 0
  shell: sed -i 's/@o_todos//g' "/etc/samba/smb.conf"
  


######################################################
- name: MAKE SURE SAMBA SERVICE IS RUNNING
  #when: keberos_installed.rc == 1
  when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0)
  systemd:
    state: started
    name: smb
    enabled: yes


- name: CREAR USUARIO UXXI
  user:
    name: "{{ dc.uxxi.useru }}"
    shell: /bin/bash
    state: present
    update_password: on_create
    password: "{{ dc.uxxi.passu | password_hash('sha512') }}"

- name: CREAR USUARIO UXXIDB
  user:
    name: "{{ dc.uxxidb.useru }}"
    shell: /bin/bash
    state: present
    update_password: on_create
    password: "{{ dc.uxxidb.passu | password_hash('sha512') }}"

- name: HABILITAR UXXI SAMBA
  when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0)
  shell: "(echo {{ dc.uxxi.passu }}; echo {{ dc.uxxi.passu }}) | smbpasswd -a uxxi"
  #shell: (echo "xxxxxx"; echo "xxxxx") | smbpasswd -a uxxi

- name: HABILITAR UXXIDB SAMBA
  when: (install_redhat.rc == 0 ) or (install_aws.rc == 0) or (install_redhat8.rc == 0)
  shell: "(echo {{ dc.uxxidb.passu }}; echo {{ dc.uxxidb.passu }}) | smbpasswd -a uxxidb"
  #shell: (echo "xxxxxx"; echo "xxxxx") | smbpasswd -a uxxi


 

  





